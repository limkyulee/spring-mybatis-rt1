<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kyuleelim.admincore.user.mapper.UserMapper">

    <select id="findById" parameterType="Long" resultType="User">
        -- UserMapper.findById
      SELECT id, username, email, created_at
        FROM user
       WHERE id = #{id}
         AND use_yn = 'Y'
    </select>

    <select id="findAll" parameterType="UserListReqDto" resultType="User">
        -- UserMapper.findAll
        SELECT *
          FROM user
        <where>
            use_yn = 'Y'
            <if test="searchType != null and keyword != null and keyword != ''">
                <choose>
                    <when test="searchType == 'username'">
                        AND username
                       LIKE CONCAT(#{keyword}, '%')
                    </when>
                    <when test="searchType == 'email'">
                        AND email
                       LIKE CONCAT(#{keyword}, '%')
                    </when>
                </choose>
            </if>
        </where>
        ORDER BY id DESC
        LIMIT #{limit}
       OFFSET #{offset}
    </select>

    <select id="countAll" parameterType="UserListReqDto" resultType="int">
        -- UserMapper.countAll
        SELECT COUNT(*)
          FROM user
        <where>
            use_yn = 'Y'
            <if test="searchType != null and keyword != null and keyword != ''">
                <choose>
                    <when test="searchType == 'username'">
                        AND username
                       LIKE CONCAT(#{keyword}, '%')
                    </when>
                    <when test="searchType == 'email'">
                        AND email
                       LIKE CONCAT(#{keyword}, '%')
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <insert id="insertUser" parameterType="UserReqDto" useGeneratedKeys="true" keyProperty="id">
        -- UserMapper.insertUser
        INSERT INTO user (
             username,
             password,
             name,
             email,
             use_yn,
             created_at,
             updated_at
        )
        VALUES (
             #{username},
             #{password},
             #{name},
             #{email},
             #{useYn},
             CURRENT_TIMESTAMP,
             CURRENT_TIMESTAMP
        )
    </insert>
    
    <update id="updateUser" parameterType="UserReqDto">
        -- UserMapper.updatedUser
        UPDATE user
        <set>
            <trim suffixOverrides=",">
                <if test="user.username !=null">
                    username = #{user.username},
                </if>
                <if test="user.password != null">
                    password = #{user.password},
                </if>
                <if test="user.email != null">
                    email = #{user.email},
                </if>
                <if test="user.useYn != null">
                    use_yn = #{user.useYn},
                </if>
                updated_at = NOW()
            </trim>
        </set>
        WHERE id = #{id}
    </update>

    <delete id="deleteUser" parameterType="Long">
        -- UserMapper.deleteUser
        UPDATE user
           SET use_yn = 'N', updated_at = NOW()
         WHERE id = #{id}
    </delete>

    <select id="existUserById" parameterType="Long" resultType="boolean">
        -- UserMapper.existsUserById
        SELECT CASE WHEN COUNT(1) > 0 THEN TRUE
                    ELSE FALSE
                    END
          FROM user
         WHERE id = #{id}
    </select>

  <select id="existUserByEmail" parameterType="String" resultType="boolean">
    -- UserMapper.existsUserByEmail
    SELECT CASE WHEN COUNT(1) > 0 THEN TRUE
                ELSE FALSE
             END
    FROM user
    WHERE email = #{email}
  </select>
</mapper>