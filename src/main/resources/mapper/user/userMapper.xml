<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kyuleelim.admincore.user.mapper.UserMapper">

    <select id="retrieveUser" parameterType="UserReqDto" resultType="User">
        -- userMapper.retrieveUser
      SELECT USER_ID
           , USER_NM
           , EMAIL
           , CREATED_AT
        FROM USER
       WHERE USER_ID = #{userId}
         AND USE_YN = 'Y'
    </select>

    <select id="retrieveUserList" parameterType="UserListReqDto" resultType="User">
        -- userMapper.retrieveUserList
        SELECT USER_ID
             , USER_NM
             , EMAIL
          FROM USER
         WHERE USE_YN = 'Y'
        <if test="searchType != null and searchType != '' and keyword != null and keyword != ''">
            <choose>
                <when test="searchType == 'username'">
                    AND USER_NM LIKE CONCAT(#{keyword}, '%')
                </when>
                <when test="searchType == 'email'">
                    AND EMAIL LIKE CONCAT(#{keyword}, '%')
                </when>
            </choose>
        </if>
        <choose>
            <when test="sidx == null or sidx == ''">
                ORDER BY USER_ID
            </when>
            <otherwise>
                <choose>
                    <when test="sidx == 'userId'">
                        ORDER BY USER_ID
                    </when>
                    <when test="sidx == 'userNm'">
                        ORDER BY USER_NM
                    </when>
                    <otherwise>
                        ORDER BY EMAIL
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
        <choose>
            <when test="sord != null or sord == ''">ASC</when>
            <otherwise>
                <choose>
                    <when test="sord == 'asc'">ASC</when>
                    <otherwise>DESC</otherwise>
                </choose>
            </otherwise>
        </choose>
        LIMIT #{offset}, #{limit}
    </select>

    <select id="retrieveAllUserList" parameterType="UserListReqDto" resultType="User">
        -- userMapper.retrieveAllUserList
        SELECT USER_ID
        , USER_NM
        , EMAIL
        FROM USER
        WHERE USE_YN = 'Y'
        <if test="searchType != null and searchType != '' and keyword != null and keyword != ''">
            <choose>
                <when test="searchType == 'username'">
                    AND USER_NM LIKE CONCAT(#{keyword}, '%')
                </when>
                <when test="searchType == 'email'">
                    AND EMAIL LIKE CONCAT(#{keyword}, '%')
                </when>
            </choose>
        </if>
        ORDER BY USER_ID
    </select>

    <select id="retrieveUserListCount" resultType="int" parameterType="UserListReqDto">
        -- userMapper.retrieveUserListCount
        SELECT COUNT(*)
          FROM USER
         WHERE USE_YN = 'Y'
         <if test="searchType != null and searchType != '' and keyword != null and keyword != ''">
             <choose>
                 <when test="searchType == 'username'">
                     AND USER_NM LIKE CONCAT(#{keyword}, '%')
                 </when>
                 <when test="searchType == 'email'">
                     AND EMAIL LIKE CONCAT(#{keyword}, '%')
                 </when>
             </choose>
         </if>
    </select>

    <insert id="createUser" parameterType="UserReqDto" useGeneratedKeys="true" keyProperty="id">
        -- userMapper.createUser
        INSERT INTO USER
             ( USER_NM
             , PASSWORD
             , EMAIL
             , USE_YN
             , CREATED_AT
             , UPDATED_AT )
        VALUES
             ( #{userNm}
             , #{password}
             , #{email}
             , #{useYn}
             , CURRENT_TIMESTAMP
             , CURRENT_TIMESTAMP )
    </insert>
    
    <update id="updateUser" parameterType="UserReqDto">
        -- userMapper.updatedUser
        UPDATE USER
           SET USER_NM = #{userNm}
             , PASSWORD = #{password}
             , EMAIL = #{email}
             , USE_YN = #{useYn}
             , UPDATED_AT = CURRENT_TIMESTAMP
         WHERE USER_ID = #{userId}
    </update>

    <delete id="deleteUser" parameterType="UserReqDto">
        -- userMapper.deleteUser
        DELETE FROM USER
         WHERE USER_ID = #{userId}
    </delete>

  <select id="existUserByEmail" parameterType="String" resultType="boolean">
    -- userMapper.existsUserByEmail
    SELECT CASE WHEN COUNT(1) > 0 THEN TRUE
                ELSE FALSE
             END
      FROM USER
     WHERE EMAIL = #{email}
  </select>
</mapper>